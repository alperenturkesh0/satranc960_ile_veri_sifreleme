import random

class verisifreleme:
    def encrypt(self, metin: str) -> str:
        
        alfabe = {
            "A": ["RKRNQNBB", "RKRNQBBN", "RKRBNQBN", "RKRNQBNB", "RKRNBBQN", "RKRBBNQN", "RKRBBNNQ", "RKRNBBNQ", "RKRNBNQB", "RKRBNNBQ", "RKRNNBBQ", "RKRNNQBB", "RKRBBQNN", "RKRQBBNN", "RKRQBNNB", "RKRBQNBN", "RKRQNBBN", "RKRQNNBB"],
            "B": ["RKBRNNQB", "RKBRNBNQ", "RKBRNQNB", "RKBRNBQN", "RKBRQNNB", "RKNRNQBB", "RKNRNBBQ", "RKBRQBNN", "RKNRBNQB", "RKNRBBNQ", "RKQRNNBB", "RKQRNBBN", "RKNRQNBB", "RKNRQBBN", "RKQRBNNB", "RKQRBBNN", "RKNRBQNB", "RKNRBBQN"],
            "C": ["RBKRNQBN", "RBKRBNQN", "RBKRNNBQ", "RBKRBNNQ", "RBKRQNBN", "RQKRNNBB", "RQKRNBBN", "RBKRBQNN", "RQKRBNNB", "RQKRBBNN", "RNKRNQBB", "RNKRNBBQ", "RNKRBNQB", "RNKRBBNQ", "RNKRQNBB", "RNKRQBBN", "RNKRBQNB", "RNKRBBQN"],
            "Ç": ["RKBBRNNQ", "RKBBRNQN", "RKNBRNBQ", "RKBBRQNN", "RKBNRNQB", "RKQBRNBN", "RKBNRBNQ", "RKBQRNNB", "RKBQRBNN", "RKNBRQBN", "RKBNRQNB", "RKBNRBQN", "RKNQRNBB", "RKNQRBBN", "RKQNRNBB", "RKQNRBBN", "RKNNRQBB", "RKNNRBBQ"],
            "D": ["RBKQRNBN", "RQKBRNBN", "RBKNRNBQ", "RBKNRQBN", "RQKNRNBB", "RQKNRBBN", "RNKBRNBQ", "RNKQRNBB", "RNKQRBBN", "RNKBRQBN", "RNKNRQBB", "RNKNRBBQ"],
            "E": ["RBBKRNNQ", "RBBKRQNN", "RBBKRNQN", "RBQKRNBN", "RQBKRNNB", "RQBKRBNN", "RBNKRNBQ", "RNBKRNQB", "RNBKRBNQ", "RBNKRQBN", "RNQKRNBB", "RNQKRBBN", "RNBKRQNB", "RNBKRBQN", "RQNKRNBB", "RQNKRBBN", "RNNKRQBB", "RNNKRBBQ"],
            "F": ["RKQBBRNN", "RKBBQRNN", "RKNBBRNQ", "RKBBNRNQ", "RKNBBRQN", "RKBBNRQN", "RKQNBRNB", "RKBQNRNB", "RKNBQRBN", "RKNQBRNB", "RKBNQRNB", "RKQBNRBN", "RKNNQRBB", "RKNBNRBQ", "RKNNBRQB", "RKBNNRQB", "RKNQNRBB", "RKQNNRBB"],
            "G": ["RNKNQRBB", "RNKNBRQB", "RNKBNRBQ", "RNKQBRNB", "RNKBQRBN", "RNKBBRQN", "RNKBBRNQ", "RQKNNRBB", "RBKNNRBQ", "RQKNBRNB", "RQKBNRBN", "RBKQNRBN", "RBKNQRBN", "RBKNBRQN", "RBKNBRNQ", "RQKBBRNN", "RBKQBRNN", "RNKQNRBB", "RBBKNRNQ", "RBQKBRNN", "RBBKQRNN"],
            "Ğ": ["RNNKQRBB", "RNNKBRQB", "RQNKNRBB", "RNQKNRBB", "RNBKNRQB", "RBNKNRBQ", "RQNKBRNB", "RNQKBRNB", "RNBKQRNB", "RBNKQRBN", "RBNKBRQN", "RBNKBRNQ", "RQBKNRNB", "RBQKNRBN", "RBBKNRQN"],
            "H": ["RQNNKRBB", "RNQNKRBB", "RNNQKRBB", "RNBNKRQB", "RBNNKRBQ", "RNNBKRBQ", "RQBNKRNB", "RBQNKRBN", "RQNBKRBN", "RNBQKRNB", "RBNQKRBN", "RNQBKRBN", "RBBNKRQN", "RNBBKRQN", "RBBNKRNQ", "RNBBKRNQ", "RBBQKRNN", "RQBBKRNN"],
            "I": ["RKBQNNRB", "RKQNBNRB", "RKBNQNRB", "RKNQBNRB", "RKBNNQRB", "RKNNBQRB", "RKBBNNRQ", "RKBNNBRQ", "RKNBBNRQ", "RKNNBBRQ", "RKBBQNRN", "RKBQNBRN", "RKQBBNRN", "RKQNBBRN", "RKBBNQRN", "RKBNQBRN", "RKNBBQRN", "RKNQBBRN"],
            "İ": ["RNKQBNRB", "RNKNBQRB", "RNKBBNRQ", "RNKNBBRQ", "RNKBBQRN", "RNKQBBRN", "RQKNBNRB", "RBKNBNRQ", "RQKBBNRN", "RQKNBBRN", "RBKQBNRN", "RBKNBQRN"],
            "J": ["RQBKNBRN", "RBQKBNRN", "RBBKQNRN", "RBBKNQRN", "RNNKBQRB", "RNNKBBRQ", "RQNKBNRB", "RNQKBNRB", "RNBKQNRB", "RNBKNQRB", "RNBKNBRQ", "RBNKBNRQ", "RQNKBBRN", "RNBKQBRN", "RBNKBQRN", "RQBKNNRB", "RBBKNNRQ", "RNQKBBRN"],
            "K": ["RNBNKQRB", "RNBNKBRQ", "RQBNKNRB", "RNBQKNRB", "RBBNKNRQ", "RNBBKNRQ", "RQBNKBRN", "RNBQKBRN", "RBBNKQRN", "RNBBKQRN", "RBBQKNRN", "RQBBKNRN"],
            "L": ["RQBNNKRB", "RQNNBKRB", "RNBQNKRB", "RNQNBKRB", "RNBNQKRB", "RNNQBKRB", "RBBNNKRQ", "RNBBNKRQ", "RBNNBKRQ", "RNNBBKRQ", "RBBQNKRN", "RQBBNKRN", "RBQNBKRN", "RQNBBKRN", "RBBNQKRN", "RNBBQKRN", "RBNQBKRN", "RNQBBKRN"],
            "M": ["RKBBQNNR", "RKBQNBNR", "RKQBBNNR", "RKQNBBNR", "RKQBNNBR", "RKQNNBBR", "RKBBNQNR", "RKBNQBNR", "RKNBBQNR", "RKNQBBNR", "RKNBQNBR", "RKNQNBBR", "RKBBNNQR", "RKBNNBQR", "RKNBBNQR", "RKNNBBQR", "RKNBNQBR", "RKNNQBBR"],
            "N": ["RNKBBQNR", "RNKQBBNR", "RNKBQNBR", "RNKQNBBR", "RNKBBNQR", "RNKNBBQR", "RNKBNQBR", "RNKNQBBR", "RQKBBNNR", "RQKNBBNR", "RQKBNNBR", "RQKNNBBR", "RBKQBNNR", "RBKQNNBR", "RBKNBQNR", "RBKNQNBR", "RBKNBNQR", "RBKNNQBR"],
            "O": ["RQBKNBNR", "RBQKBNNR", "RBQKNNBR", "RBBKQNNR", "RBBKNQNR", "RBBKNNQR", "RNNKBBQR", "RQNKBBNR", "RQNKNBBR", "RNQKBBNR", "RNQKNBBR", "RNBKQBNR", "RBNKBQNR", "RBNKQNBR", "RBNKBNQR", "RNBKNBQR", "RBNKNQBR", "RNNKQBBR"],
            "Ö": ["RQNNKBBR", "RNQNKBBR", "RNNQKBBR", "RNBNKBQR", "RBNNKQBR", "RNNBKQBR", "RNNQKBBR", "RQBNKBNR", "RBQNKNBR", "RQNBKNBR", "RNBQKBNR", "RBNQKNBR", "RNQBKNBR", "RBBNKQNR", "RNBBKQNR", "RBBNKNQR", "RNBBKNQR", "RBBQKNNR", "RQBBKNNR"],
            "P": ["RBQNNKBR", "RQNBNKBR", "RBNQNKBR", "RNQBNKBR", "RBNNQKBR", "RNNBQKBR", "RBBNNKQR", "RNBBNKQR", "RBNNBKQR", "RNNBBKQR", "RBBQNKNR", "RQBBNKNR", "RBQNBKNR", "RQNBBKNR", "RBBNQKNR", "RNBBQKNR", "RBNQBKNR", "RNQBBKNR"],
            "Q": ["RBBQNNKR", "RQBBNNKR", "RQBNNBKR", "RBQNBNKR", "RQNBBNKR", "RQNNBBKR", "RBBNQNKR", "RNBBQNKR", "RNBQNBKR", "RBNQBNKR", "RNQBBNKR", "RNQNBBKR", "RBBNNQKR", "RNBBNQKR", "RNBNQBKR", "RBNNBQKR", "RNNBBQKR", "RNNQBBKR"],
            "R": ["NRKRBBQN", "NRKRBQNB", "NRKRQBBN", "NRKRQNBB", "NRKRBBNQ", "NRKRBNQB", "NRKRNBBQ", "NRKRNQBB", "QRKRBBNN", "QRKRBNNB", "QRKRNBBN", "QRKRNNBB", "BRKRQBNN", "BRKRQNNB", "BRKRNBQN", "BRKRNQNB", "BRKRNBNQ", "BRKRNNQB"],
            "S": ["NRKNRBBQ", "NRKNRQBB", "NRKQRBBN", "NRKQRNBB", "NRKBRQBN", "NRKBRNBQ", "QRKNRBBN", "QRKNRNBB", "BRKNRBQN", "BRKNRQNB", "BRKNRBNQ", "BRKNRNQB", "QRKBRNBN", "BRKQRBNN", "BRKQRNNB", "BRKBRQNN", "BRKBRNQN", "BRKBRNNQ"],
            "Ş": ["NRNKRBBQ", "NRNKRQBB", "NRQKRBBN", "NRQKRNBB", "NRBKRBQN", "NRBKRQNB", "NRBKRBNQ", "NRBKRNQB", "QRNKRBBN", "QRNKRNBB", "BRNKRBQN", "BRNKRQNB", "BRNKRBNQ", "BRNKRNQB", "QRBKRBNN", "QRBKRNNB", "BRQKRBNN", "BRQKRNNB"],
            "T": ["QRKNNRBB", "BRKNNRQB", "QRKNBRNB", "QRKBNRBN", "BRKQNRNB", "BRKNQRNB", "NRKQNRBB", "NRKNQRBB", "NRKNBRQB", "NRKBNRBQ", "NRKQBRNB", "NRKBQRBN", "NRKBBRQN", "NRKBBRNQ", "BRKBNRQN", "BRKBNRNQ", "QRKBBRNN", "BRKBQRNN"],
            "U": ["NRNKQRBB", "NRNKBRQB", "NRQKNRBB", "NRBKNRQB", "NRQKBRNB", "NRBKQRNB", "QRNKNRBB", "BRNKNRQB", "QRNKBRNB", "BRNKQRNB", "QRBKNRNB", "BRQKNRNB"],
            "Ü": ["NRQNKRBB", "NRNQKRBB", "NRBNKRQB", "NRNBKRBQ", "NRBQKRNB", "NRQBKRBN", "NRBBKRQN", "NRBBKRNQ", "QRNNKRBB", "BRNNKRQB", "QRBNKRNB", "QRNBKRBN", "BRQNKRNB", "BRNQKRNB", "BRNBKRQN", "BRNBKRNQ", "QRBBKRNN", "BRQBKRNN"],
            "V": ["NRBNKQRB", "NRBNKBRQ", "NRBQKNRB", "NRBBKNRQ", "NRBQKBRN", "NRBBKQRN", "BRNNKQRB", "BRNNKBRQ", "QRBNKNRB", "BRQNKNRB", "BRNQKNRB", "BRNBKNRQ", "QRBNKBRN", "BRQNKBRN", "BRNQKBRN", "BRNBKQRN", "QRBBKNRN", "BRQBKNRN"],
            "W": ["NRKQBNRB", "NRKNBQRB", "NRKBBNRQ", "NRKNBBRQ", "NRKBBQRN", "NRKQBBRN", "QRKNBNRB", "BRKQNNRB", "BRKNQNRB", "BRKNNQRB", "BRKBNNRQ", "BRKNNBRQ", "QRKBBNRN", "QRKNBBRN", "BRKBQNRN", "BRKQNBRN", "BRKBNQRN", "BRKNQBRN"],
            "X": ["NRNKBQRB", "NRNKBBRQ", "NRQKBNRB", "NRBKQNRB", "NRBKNQRB", "NRBKNBRQ", "NRQKBBRN", "NRBKQBRN", "QRNKBNRB", "BRNKQNRB", "BRNKNQRB", "BRNKNBRQ", "QRNKBBRN", "BRNKQBRN", "QRBKNNRB", "BRQKNNRB", "QRBKNBRN", "BRQKNBRN"],
            "Y": ["NRBQNKRB", "NRQNBKRB", "NRNQBKRB", "NRBBNKRQ", "NRNBBKRQ", "NRBBQKRN", "NRQBBKRN", "QRBNNKRB", "QRNNBKRB", "BRQNNKRB", "BRNQNKRB", "BRNNQKRB", "BRNBNKRQ", "QRBBNKRN", "QRNBBKRN", "BRQBNKRN", "BRNBQKRN"],
            "Z": ["NRKBBQNR", "NRKQBBNR", "NRKBQNBR", "NRKQNBBR", "NRKBBNQR", "NRKNBBQR", "NRKBNQBR", "NRKNQBBR", "QRKBBNNR", "QRKNBBNR", "QRKBNNBR", "QRKNNBBR", "BRKBQNNR", "BRKQNBNR", "BRKBNQNR", "BRKNQBNR", "BRKBNNQR", "BRKNNBQR"],
            "1": ["NRNKBBQR", "NRNKQBBR", "NRQKBBNR", "NRQKNBBR", "NRBKQBNR", "NRBKNBQR", "QRNKBBNR", "QRNKNBBR", "BRNKQBNR", "BRNKNBQR", "QRBKNBNR", "BRQKNBNR"],
            "2": ["NRQNKBBR", "NRNQKBBR", "NRBNKBQR", "NRNBKQBR", "NRBQKBNR", "NRQBKNBR", "NRBBKQNR", "NRBBKNQR", "QRNNKBBR", "BRNNKBQR", "QRBNKBNR", "QRNBKNBR", "BRQNKBNR", "BRNQKBNR", "BRNBKQNR", "QRBBKNNR", "BRQBKNNR", "BRNBKNQR"],
            "3": ["NRQBNKBR", "NRNBQKBR", "NRBBNKQR", "NRNBBKQR", "NRBBQKNR", "NRQBBKNR", "QRNBNKBR", "BRNBNKQR", "QRBBNKNR", "QRNBBKNR", "BRQBNKNR", "BRNBQKNR"],
            "4": ["NRBBQNKR", "NRBQNBKR", "NRQBBNKR", "NRQNBBKR", "NRBBNQKR", "NRBNQBKR", "NRBNQKRB", "NRNBBQKR", "NRNQBBKR", "QRBBNNKR", "QRBNNBKR", "QRNBBNKR", "QRNNBBKR", "BRQBNNKR", "BRQNNBKR", "BRNBQNKR", "BRNQNBKR", "BRNBNQKR", "BRNNQBKR"],
            "5": ["NNRKRBBQ", "NNRKRQBB", "QNRKRBBN", "QNRKRNBB", "NQRKRBBN", "NQRKRNBB", "BNRKRBQN", "BNRKRQNB", "NBRKRQBN", "BNRKRBNQ", "BNRKRNQB", "NBRKRNBQ", "BQRKRBNN", "BQRKRNNB", "QBRKRNBN", "BBRKRNQN", "BBRKRQNN", "BBRKRNNQ", ],
            "6": ["NNRKQRBB", "NNRKBRQB", "QNRKNRBB", "NQRKNRBB", "BNRKNRQB", "NBRKNRBQ", "NQRKBRNB", "BNRKQRNB", "NBRKQRBN", "QNRKBRNB", "NBRKBRQN", "NBRKBRNQ", "BQRKNRNB", "QBRKNRBN", "BBRKNRQN", "BBRKNRNQ", "QBRKBRNN", "BBRKQRNN"],
            "7": ["NNRQKRBB", "NNRBKRBQ", "QNRNKRBB", "NQRNKRBB", "BNRNKRQB", "NBRNKRBQ", "QNRBKRBN", "NBRQKRBN", "BNRBKRQN", "NQRBKRBN", "BNRQKRNB", "BQRNKRNB", "QBRNKRBN", "BBRNKRQN", "BBRNKRNQ", "BBRQKRNN", "BQRBKRNN", "BNRBKRNQ"],
            "8": ["NNRKBQRB", "NNRKBBRQ", "QNRKBNRB", "NQRKBNRB", "BNRKQNRB", "BNRKNQRB", "BNRKNBRQ", "NBRKBNRQ", "NQRKBBRN", "BNRKQBRN", "NBRKBQRN", "BBRKQNRN", "QNRKBBRN", "BQRKNNRB", "BBRKNNRQ", "BQRKNBRN", "QBRKBNRN", "BBRKNQRN"],
            "9": ["BNRNKQRB", "BNRNKBRQ", "BNRQKNRB", "BNRBKNRQ", "BNRQKBRN", "BNRBKQRN", "BQRNKNRB", "BBRNKNRQ", "BQRNKBRN", "BBRNKQRN", "BBRQKNRN", "BQRBKNRN"],
            "0": ["NNRQBKRB", "NNRBBKRQ", "QNRNBKRB", "NQRNBKRB", "BNRQNKRB", "BNRNQKRB", "BNRBNKRQ", "NBRNBKRQ", "QNRBBKRN", "NQRBBKRN", "BNRBQKRN", "NBRQBKRN", "BQRNNKRB", "BBRNNKRQ", "BQRBNKRN", "QBRNBKRN", "BBRQNKRN", "BBRNQKRN"],
            ".": ["NNRKBBQR", "NNRKQBBR", "QNRKBBNR", "QNRKNBBR", "NQRKBBNR", "NQRKNBBR", "BNRKQBNR", "NBRKBQNR", "NBRKQNBR", "BNRKNBQR", "NBRKBNQR", "NBRKNQBR", "BQRKNBNR", "QBRKBNNR", "QBRKNNBR", "BBRKQNNR", "BBRKNQNR", "BBRKNNQR"],
            ",": ["NNRQKBBR", "NNRBKQBR", "QNRNKBBR", "NQRNKBBR", "BNRNKBQR", "NBRNKQBR", "NQRBKNBR", "QNRBKNBR", "BNRQKBNR", "BNRBKNQR", "NBRQKNBR", "BNRBKQNR", "BQRNKBNR", "QBRNKNBR", "BBRNKQNR", "BQRBKNNR", "QRBKNNRB", "BBRQKNNR",  "BBRNKNQR"],
            "?": ["NNRBQKBR", "NNRBBKQR", "QNRBNKBR", "NQRBNKBR", "NBRQNKBR", "NBRNQKBR", "BNRBNKQR", "NBRNBKQR", "QNRBBKNR", "NQRBBKNR", "BNRBQKNR", "NBRQBKNR", "QBRNNKBR", "BBRNNKQR" "BQRBNKNR", "QBRNBKNR", "BBRQNKNR", "BBRNQKNR"],
            "!": ["NNRBBQKR", "NNRQBBKR", "QNRBBNKR", "QNRNBBKR", "NQRBBNKR", "NQRNBBKR", "BNRBQNKR", "BNRQNBKR", "NBRQBNKR", "BNRBNQKR", "BNRNQBKR", "NBRNBQKR", "BBRNNQKR", "BBRNQNKR", "BQRBNNKR", "BQRNNBKR", "QBRNBNKR", "BBRQNNKR"],
            ":": ["QNNRKRBB", "NQNRKRBB", "NNQRKRBB", "NNBRKRQB", "NBNRKRBQ", "BNNRKRQB", "BQNRKRNB", "QNBRKRNB", "QBNRKRBN", "BNQRKRNB", "NQBRKRNB", "NBQRKRBN", "BBNRKRQN", "NBBRKRQN", "BBNRKRNQ", "NBBRKRNQ", "QBBRKRNN", "BBQRKRNN"],
            ";": ["BNNRKQRB", "NNBRKQRB", "BNNRKBRQ", "NNBRKBRQ", "QNBRKNRB", "BQNRKNRB", "BNQRKNRB", "NQBRKNRB", "BBNRKNRQ", "NBBRKNRQ", "BQNRKBRN", "QNBRKBRN", "BNQRKBRN", "NQBRKBRN", "BBNRKQRN", "NBBRKQRN", "QBBRKNRN"],
            " ": ["QNNRBKRB", "NQNRBKRB", "NNQRBKRB", "BNNRQKRB", "NNBRQKRB", "NBNRBKRQ", "BQNRNKRB", "QNBRNKRB", "BNQRNKRB", "NQBRNKRB", "BBNRNKRQ", "NBBRNKRQ", "NBQRBKRN", "QBNRBKRN", "BBNRQKRN", "BBQRNKRN", "QBBRNKRN"],
            "=": ["QNNRKBBR", "NQNRKBBR", "NNQRKBBR", "BNNRKBQR", "NNBRKBQR", "NBNRKQBR", "QNBRKBNR", "QBNRKNBR", "BNQRKBNR", "NQBRKBNR", "BQNRKBNR", "NBQRKNBR", "BBNRKNQR", "BBNRKQNR", "NBBRKQNR", "NBBRKNQR", "BBQRKNNR", "QBBRKNNR"],
            "@": ["BBQRNKNR", "NBNRQKBR", "NBNRBKQR", "QBNRNKBR", "NBQRNKBR", "BBNRNKQR", "NBBRNKQR", "QBNRBKNR", "NBQRBKNR", "BBNRQKNR", "NBBRQKNR", "QBBRNKNR"],
            "\"": ["QNNRBBKR", "NQNRBBKR", "NNQRBBKR", "BNNRQBKR", "NNBRQBKR", "NBNRBQKR", "BQNRNBKR", "QNBRNBKR", "QBNRBNKR", "BNQRNBKR", "NQBRNBKR", "NBQRBNKR", "BBNRQNKR", "NBBRQNKR", "BBNRNQKR", "NBBRNQKR", "QBBRNNKR", "BBQRNNKR"],
            "/": ["BQNNRKRB", "QNBNRKRB", "BNQNRKRB", "NQBNRKRB", "BNNQRKRB", "NNBQRKRB", "NBBNRKRQ", "NNBBRKRQ", "BBNNRKRQ", "BNNBRKRQ", "BBQNRKRN", "BQNBRKRN", "NBBQRKRN", "NQBBRKRN", "QBBNRKRN", "QNBBRKRN", "BBNQRKRN", "BNQBRKRN"],
            "-": ["QBNNRKBR", "QNNBRKBR", "NBQNRKBR", "NQNBRKBR", "NBNQRKBR", "NNQBRKBR", "BBNNRKQR", "BNNBRKQR", "NBBNRKQR", "NNBBRKQR", "QBBNRKNR", "QNBBRKNR", "BBNQRKNR", "BNQBRKNR", "NBBQRKNR", "NQBBRKNR", "BBQNRKNR", "BQNBRKNR"],
            "+": ["BQNNRBKR", "QNBNRBKR", "BNQNRBKR", "NQBNRBKR", "BNNQRBKR", "NNBQRBKR", "BNNBRQKR", "NBBNRQKR", "BBNNRQKR", "NNBBRQKR", "BBQNRNKR", "BQNBRNKR", "QBBNRNKR", "QNBBRNKR", "BBNQRNKR", "BNQBRNKR", "NBBQRNKR", "NQBBRNKR"],
            "*": ["BBQNNRKR", "BQNBNRKR", "QBBNNRKR", "QNBBNRKR", "QBNNBRKR", "QNNBBRKR", "BBNQNRKR", "BNQBNRKR", "NBBQNRKR", "NQBBNRKR", "NBQNBRKR", "NQNBBRKR", "BBNNQRKR", "BNNBQRKR", "NBBNQRKR", "NNBBQRKR", "NBNQBRKR", "NNQBBRKR"]
        }

        taslar = {
            "B": "1",
            "K": "2",
            "N": "3",
            "Q": "4",
            "R": "5"
        }


        sifreli_metin1 = ""
        sifreli_metin2 = ""
        for karakter in metin:
            if karakter == "i":
                sifreli_metin1 += random.choice(alfabe["İ"])
            elif karakter == "ı":
                sifreli_metin1 += random.choice(alfabe["I"])
            elif karakter.upper() in alfabe:
                sifreli_metin1 += random.choice(alfabe[karakter.upper()])
            else:
                sifreli_metin1 += karakter
        for karakter in sifreli_metin1:
            if karakter in taslar:
                sifreli_metin2 += taslar.get(karakter)
            else:
                sifreli_metin1 += karakter
        return sifreli_metin2

    def decrypt(self, sifreli_metin: str) -> str:


        alfabe = {
            "A": ["RKRNQNBB", "RKRNQBBN", "RKRBNQBN", "RKRNQBNB", "RKRNBBQN", "RKRBBNQN", "RKRBBNNQ", "RKRNBBNQ", "RKRNBNQB", "RKRBNNBQ", "RKRNNBBQ", "RKRNNQBB", "RKRBBQNN", "RKRQBBNN", "RKRQBNNB", "RKRBQNBN", "RKRQNBBN", "RKRQNNBB"],
            "B": ["RKBRNNQB", "RKBRNBNQ", "RKBRNQNB", "RKBRNBQN", "RKBRQNNB", "RKNRNQBB", "RKNRNBBQ", "RKBRQBNN", "RKNRBNQB", "RKNRBBNQ", "RKQRNNBB", "RKQRNBBN", "RKNRQNBB", "RKNRQBBN", "RKQRBNNB", "RKQRBBNN", "RKNRBQNB", "RKNRBBQN"],
            "C": ["RBKRNQBN", "RBKRBNQN", "RBKRNNBQ", "RBKRBNNQ", "RBKRQNBN", "RQKRNNBB", "RQKRNBBN", "RBKRBQNN", "RQKRBNNB", "RQKRBBNN", "RNKRNQBB", "RNKRNBBQ", "RNKRBNQB", "RNKRBBNQ", "RNKRQNBB", "RNKRQBBN", "RNKRBQNB", "RNKRBBQN"],
            "Ç": ["RKBBRNNQ", "RKBBRNQN", "RKNBRNBQ", "RKBBRQNN", "RKBNRNQB", "RKQBRNBN", "RKBNRBNQ", "RKBQRNNB", "RKBQRBNN", "RKNBRQBN", "RKBNRQNB", "RKBNRBQN", "RKNQRNBB", "RKNQRBBN", "RKQNRNBB", "RKQNRBBN", "RKNNRQBB", "RKNNRBBQ"],
            "D": ["RBKQRNBN", "RQKBRNBN", "RBKNRNBQ", "RBKNRQBN", "RQKNRNBB", "RQKNRBBN", "RNKBRNBQ", "RNKQRNBB", "RNKQRBBN", "RNKBRQBN", "RNKNRQBB", "RNKNRBBQ"],
            "E": ["RBBKRNNQ", "RBBKRQNN", "RBBKRNQN", "RBQKRNBN", "RQBKRNNB", "RQBKRBNN", "RBNKRNBQ", "RNBKRNQB", "RNBKRBNQ", "RBNKRQBN", "RNQKRNBB", "RNQKRBBN", "RNBKRQNB", "RNBKRBQN", "RQNKRNBB", "RQNKRBBN", "RNNKRQBB", "RNNKRBBQ"],
            "F": ["RKQBBRNN", "RKBBQRNN", "RKNBBRNQ", "RKBBNRNQ", "RKNBBRQN", "RKBBNRQN", "RKQNBRNB", "RKBQNRNB", "RKNBQRBN", "RKNQBRNB", "RKBNQRNB", "RKQBNRBN", "RKNNQRBB", "RKNBNRBQ", "RKNNBRQB", "RKBNNRQB", "RKNQNRBB", "RKQNNRBB"],
            "G": ["RNKNQRBB", "RNKNBRQB", "RNKBNRBQ", "RNKQBRNB", "RNKBQRBN", "RNKBBRQN", "RNKBBRNQ", "RQKNNRBB", "RBKNNRBQ", "RQKNBRNB", "RQKBNRBN", "RBKQNRBN", "RBKNQRBN", "RBKNBRQN", "RBKNBRNQ", "RQKBBRNN", "RBKQBRNN", "RNKQNRBB", "RBBKNRNQ", "RBQKBRNN", "RBBKQRNN"],
            "Ğ": ["RNNKQRBB", "RNNKBRQB", "RQNKNRBB", "RNQKNRBB", "RNBKNRQB", "RBNKNRBQ", "RQNKBRNB", "RNQKBRNB", "RNBKQRNB", "RBNKQRBN", "RBNKBRQN", "RBNKBRNQ", "RQBKNRNB", "RBQKNRBN", "RBBKNRQN"],
            "H": ["RQNNKRBB", "RNQNKRBB", "RNNQKRBB", "RNBNKRQB", "RBNNKRBQ", "RNNBKRBQ", "RQBNKRNB", "RBQNKRBN", "RQNBKRBN", "RNBQKRNB", "RBNQKRBN", "RNQBKRBN", "RBBNKRQN", "RNBBKRQN", "RBBNKRNQ", "RNBBKRNQ", "RBBQKRNN", "RQBBKRNN"],
            "I": ["RKBQNNRB", "RKQNBNRB", "RKBNQNRB", "RKNQBNRB", "RKBNNQRB", "RKNNBQRB", "RKBBNNRQ", "RKBNNBRQ", "RKNBBNRQ", "RKNNBBRQ", "RKBBQNRN", "RKBQNBRN", "RKQBBNRN", "RKQNBBRN", "RKBBNQRN", "RKBNQBRN", "RKNBBQRN", "RKNQBBRN"],
            "İ": ["RNKQBNRB", "RNKNBQRB", "RNKBBNRQ", "RNKNBBRQ", "RNKBBQRN", "RNKQBBRN", "RQKNBNRB", "RBKNBNRQ", "RQKBBNRN", "RQKNBBRN", "RBKQBNRN", "RBKNBQRN"],
            "J": ["RQBKNBRN", "RBQKBNRN", "RBBKQNRN", "RBBKNQRN", "RNNKBQRB", "RNNKBBRQ", "RQNKBNRB", "RNQKBNRB", "RNBKQNRB", "RNBKNQRB", "RNBKNBRQ", "RBNKBNRQ", "RQNKBBRN", "RNBKQBRN", "RBNKBQRN", "RQBKNNRB", "RBBKNNRQ", "RNQKBBRN"],
            "K": ["RNBNKQRB", "RNBNKBRQ", "RQBNKNRB", "RNBQKNRB", "RBBNKNRQ", "RNBBKNRQ", "RQBNKBRN", "RNBQKBRN", "RBBNKQRN", "RNBBKQRN", "RBBQKNRN", "RQBBKNRN"],
            "L": ["RQBNNKRB", "RQNNBKRB", "RNBQNKRB", "RNQNBKRB", "RNBNQKRB", "RNNQBKRB", "RBBNNKRQ", "RNBBNKRQ", "RBNNBKRQ", "RNNBBKRQ", "RBBQNKRN", "RQBBNKRN", "RBQNBKRN", "RQNBBKRN", "RBBNQKRN", "RNBBQKRN", "RBNQBKRN", "RNQBBKRN"],
            "M": ["RKBBQNNR", "RKBQNBNR", "RKQBBNNR", "RKQNBBNR", "RKQBNNBR", "RKQNNBBR", "RKBBNQNR", "RKBNQBNR", "RKNBBQNR", "RKNQBBNR", "RKNBQNBR", "RKNQNBBR", "RKBBNNQR", "RKBNNBQR", "RKNBBNQR", "RKNNBBQR", "RKNBNQBR", "RKNNQBBR"],
            "N": ["RNKBBQNR", "RNKQBBNR", "RNKBQNBR", "RNKQNBBR", "RNKBBNQR", "RNKNBBQR", "RNKBNQBR", "RNKNQBBR", "RQKBBNNR", "RQKNBBNR", "RQKBNNBR", "RQKNNBBR", "RBKQBNNR", "RBKQNNBR", "RBKNBQNR", "RBKNQNBR", "RBKNBNQR", "RBKNNQBR"],
            "O": ["RQBKNBNR", "RBQKBNNR", "RBQKNNBR", "RBBKQNNR", "RBBKNQNR", "RBBKNNQR", "RNNKBBQR", "RQNKBBNR", "RQNKNBBR", "RNQKBBNR", "RNQKNBBR", "RNBKQBNR", "RBNKBQNR", "RBNKQNBR", "RBNKBNQR", "RNBKNBQR", "RBNKNQBR", "RNNKQBBR"],
            "Ö": ["RQNNKBBR", "RNQNKBBR", "RNNQKBBR", "RNBNKBQR", "RBNNKQBR", "RNNBKQBR", "RNNQKBBR", "RQBNKBNR", "RBQNKNBR", "RQNBKNBR", "RNBQKBNR", "RBNQKNBR", "RNQBKNBR", "RBBNKQNR", "RNBBKQNR", "RBBNKNQR", "RNBBKNQR", "RBBQKNNR", "RQBBKNNR"],
            "P": ["RBQNNKBR", "RQNBNKBR", "RBNQNKBR", "RNQBNKBR", "RBNNQKBR", "RNNBQKBR", "RBBNNKQR", "RNBBNKQR", "RBNNBKQR", "RNNBBKQR", "RBBQNKNR", "RQBBNKNR", "RBQNBKNR", "RQNBBKNR", "RBBNQKNR", "RNBBQKNR", "RBNQBKNR", "RNQBBKNR"],
            "Q": ["RBBQNNKR", "RQBBNNKR", "RQBNNBKR", "RBQNBNKR", "RQNBBNKR", "RQNNBBKR", "RBBNQNKR", "RNBBQNKR", "RNBQNBKR", "RBNQBNKR", "RNQBBNKR", "RNQNBBKR", "RBBNNQKR", "RNBBNQKR", "RNBNQBKR", "RBNNBQKR", "RNNBBQKR", "RNNQBBKR"],
            "R": ["NRKRBBQN", "NRKRBQNB", "NRKRQBBN", "NRKRQNBB", "NRKRBBNQ", "NRKRBNQB", "NRKRNBBQ", "NRKRNQBB", "QRKRBBNN", "QRKRBNNB", "QRKRNBBN", "QRKRNNBB", "BRKRQBNN", "BRKRQNNB", "BRKRNBQN", "BRKRNQNB", "BRKRNBNQ", "BRKRNNQB"],
            "S": ["NRKNRBBQ", "NRKNRQBB", "NRKQRBBN", "NRKQRNBB", "NRKBRQBN", "NRKBRNBQ", "QRKNRBBN", "QRKNRNBB", "BRKNRBQN", "BRKNRQNB", "BRKNRBNQ", "BRKNRNQB", "QRKBRNBN", "BRKQRBNN", "BRKQRNNB", "BRKBRQNN", "BRKBRNQN", "BRKBRNNQ"],
            "Ş": ["NRNKRBBQ", "NRNKRQBB", "NRQKRBBN", "NRQKRNBB", "NRBKRBQN", "NRBKRQNB", "NRBKRBNQ", "NRBKRNQB", "QRNKRBBN", "QRNKRNBB", "BRNKRBQN", "BRNKRQNB", "BRNKRBNQ", "BRNKRNQB", "QRBKRBNN", "QRBKRNNB", "BRQKRBNN", "BRQKRNNB"],
            "T": ["QRKNNRBB", "BRKNNRQB", "QRKNBRNB", "QRKBNRBN", "BRKQNRNB", "BRKNQRNB", "NRKQNRBB", "NRKNQRBB", "NRKNBRQB", "NRKBNRBQ", "NRKQBRNB", "NRKBQRBN", "NRKBBRQN", "NRKBBRNQ", "BRKBNRQN", "BRKBNRNQ", "QRKBBRNN", "BRKBQRNN"],
            "U": ["NRNKQRBB", "NRNKBRQB", "NRQKNRBB", "NRBKNRQB", "NRQKBRNB", "NRBKQRNB", "QRNKNRBB", "BRNKNRQB", "QRNKBRNB", "BRNKQRNB", "QRBKNRNB", "BRQKNRNB"],
            "Ü": ["NRQNKRBB", "NRNQKRBB", "NRBNKRQB", "NRNBKRBQ", "NRBQKRNB", "NRQBKRBN", "NRBBKRQN", "NRBBKRNQ", "QRNNKRBB", "BRNNKRQB", "QRBNKRNB", "QRNBKRBN", "BRQNKRNB", "BRNQKRNB", "BRNBKRQN", "BRNBKRNQ", "QRBBKRNN", "BRQBKRNN"],
            "V": ["NRBNKQRB", "NRBNKBRQ", "NRBQKNRB", "NRBBKNRQ", "NRBQKBRN", "NRBBKQRN", "BRNNKQRB", "BRNNKBRQ", "QRBNKNRB", "BRQNKNRB", "BRNQKNRB", "BRNBKNRQ", "QRBNKBRN", "BRQNKBRN", "BRNQKBRN", "BRNBKQRN", "QRBBKNRN", "BRQBKNRN"],
            "W": ["NRKQBNRB", "NRKNBQRB", "NRKBBNRQ", "NRKNBBRQ", "NRKBBQRN", "NRKQBBRN", "QRKNBNRB", "BRKQNNRB", "BRKNQNRB", "BRKNNQRB", "BRKBNNRQ", "BRKNNBRQ", "QRKBBNRN", "QRKNBBRN", "BRKBQNRN", "BRKQNBRN", "BRKBNQRN", "BRKNQBRN"],
            "X": ["NRNKBQRB", "NRNKBBRQ", "NRQKBNRB", "NRBKQNRB", "NRBKNQRB", "NRBKNBRQ", "NRQKBBRN", "NRBKQBRN", "QRNKBNRB", "BRNKQNRB", "BRNKNQRB", "BRNKNBRQ", "QRNKBBRN", "BRNKQBRN", "QRBKNNRB", "BRQKNNRB", "QRBKNBRN", "BRQKNBRN"],
            "Y": ["NRBQNKRB", "NRQNBKRB", "NRNQBKRB", "NRBBNKRQ", "NRNBBKRQ", "NRBBQKRN", "NRQBBKRN", "QRBNNKRB", "QRNNBKRB", "BRQNNKRB", "BRNQNKRB", "BRNNQKRB", "BRNBNKRQ", "QRBBNKRN", "QRNBBKRN", "BRQBNKRN", "BRNBQKRN"],
            "Z": ["NRKBBQNR", "NRKQBBNR", "NRKBQNBR", "NRKQNBBR", "NRKBBNQR", "NRKNBBQR", "NRKBNQBR", "NRKNQBBR", "QRKBBNNR", "QRKNBBNR", "QRKBNNBR", "QRKNNBBR", "BRKBQNNR", "BRKQNBNR", "BRKBNQNR", "BRKNQBNR", "BRKBNNQR", "BRKNNBQR"],
            "1": ["NRNKBBQR", "NRNKQBBR", "NRQKBBNR", "NRQKNBBR", "NRBKQBNR", "NRBKNBQR", "QRNKBBNR", "QRNKNBBR", "BRNKQBNR", "BRNKNBQR", "QRBKNBNR", "BRQKNBNR"],
            "2": ["NRQNKBBR", "NRNQKBBR", "NRBNKBQR", "NRNBKQBR", "NRBQKBNR", "NRQBKNBR", "NRBBKQNR", "NRBBKNQR", "QRNNKBBR", "BRNNKBQR", "QRBNKBNR", "QRNBKNBR", "BRQNKBNR", "BRNQKBNR", "BRNBKQNR", "QRBBKNNR", "BRQBKNNR", "BRNBKNQR"],
            "3": ["NRQBNKBR", "NRNBQKBR", "NRBBNKQR", "NRNBBKQR", "NRBBQKNR", "NRQBBKNR", "QRNBNKBR", "BRNBNKQR", "QRBBNKNR", "QRNBBKNR", "BRQBNKNR", "BRNBQKNR"],
            "4": ["NRBBQNKR", "NRBQNBKR", "NRQBBNKR", "NRQNBBKR", "NRBBNQKR", "NRBNQBKR", "NRBNQKRB", "NRNBBQKR", "NRNQBBKR", "QRBBNNKR", "QRBNNBKR", "QRNBBNKR", "QRNNBBKR", "BRQBNNKR", "BRQNNBKR", "BRNBQNKR", "BRNQNBKR", "BRNBNQKR", "BRNNQBKR"],
            "5": ["NNRKRBBQ", "NNRKRQBB", "QNRKRBBN", "QNRKRNBB", "NQRKRBBN", "NQRKRNBB", "BNRKRBQN", "BNRKRQNB", "NBRKRQBN", "BNRKRBNQ", "BNRKRNQB", "NBRKRNBQ", "BQRKRBNN", "BQRKRNNB", "QBRKRNBN", "BBRKRNQN", "BBRKRQNN", "BBRKRNNQ", ],
            "6": ["NNRKQRBB", "NNRKBRQB", "QNRKNRBB", "NQRKNRBB", "BNRKNRQB", "NBRKNRBQ", "NQRKBRNB", "BNRKQRNB", "NBRKQRBN", "QNRKBRNB", "NBRKBRQN", "NBRKBRNQ", "BQRKNRNB", "QBRKNRBN", "BBRKNRQN", "BBRKNRNQ", "QBRKBRNN", "BBRKQRNN"],
            "7": ["NNRQKRBB", "NNRBKRBQ", "QNRNKRBB", "NQRNKRBB", "BNRNKRQB", "NBRNKRBQ", "QNRBKRBN", "NBRQKRBN", "BNRBKRQN", "NQRBKRBN", "BNRQKRNB", "BQRNKRNB", "QBRNKRBN", "BBRNKRQN", "BBRNKRNQ", "BBRQKRNN", "BQRBKRNN", "BNRBKRNQ"],
            "8": ["NNRKBQRB", "NNRKBBRQ", "QNRKBNRB", "NQRKBNRB", "BNRKQNRB", "BNRKNQRB", "BNRKNBRQ", "NBRKBNRQ", "NQRKBBRN", "BNRKQBRN", "NBRKBQRN", "BBRKQNRN", "QNRKBBRN", "BQRKNNRB", "BBRKNNRQ", "BQRKNBRN", "QBRKBNRN", "BBRKNQRN"],
            "9": ["BNRNKQRB", "BNRNKBRQ", "BNRQKNRB", "BNRBKNRQ", "BNRQKBRN", "BNRBKQRN", "BQRNKNRB", "BBRNKNRQ", "BQRNKBRN", "BBRNKQRN", "BBRQKNRN", "BQRBKNRN"],
            "0": ["NNRQBKRB", "NNRBBKRQ", "QNRNBKRB", "NQRNBKRB", "BNRQNKRB", "BNRNQKRB", "BNRBNKRQ", "NBRNBKRQ", "QNRBBKRN", "NQRBBKRN", "BNRBQKRN", "NBRQBKRN", "BQRNNKRB", "BBRNNKRQ", "BQRBNKRN", "QBRNBKRN", "BBRQNKRN", "BBRNQKRN"],
            ".": ["NNRKBBQR", "NNRKQBBR", "QNRKBBNR", "QNRKNBBR", "NQRKBBNR", "NQRKNBBR", "BNRKQBNR", "NBRKBQNR", "NBRKQNBR", "BNRKNBQR", "NBRKBNQR", "NBRKNQBR", "BQRKNBNR", "QBRKBNNR", "QBRKNNBR", "BBRKQNNR", "BBRKNQNR", "BBRKNNQR"],
            ",": ["NNRQKBBR", "NNRBKQBR", "QNRNKBBR", "NQRNKBBR", "BNRNKBQR", "NBRNKQBR", "NQRBKNBR", "QNRBKNBR", "BNRQKBNR", "BNRBKNQR", "NBRQKNBR", "BNRBKQNR", "BQRNKBNR", "QBRNKNBR", "BBRNKQNR", "BQRBKNNR", "QRBKNNRB", "BBRQKNNR",  "BBRNKNQR"],
            "?": ["NNRBQKBR", "NNRBBKQR", "QNRBNKBR", "NQRBNKBR", "NBRQNKBR", "NBRNQKBR", "BNRBNKQR", "NBRNBKQR", "QNRBBKNR", "NQRBBKNR", "BNRBQKNR", "NBRQBKNR", "QBRNNKBR", "BBRNNKQR" "BQRBNKNR", "QBRNBKNR", "BBRQNKNR", "BBRNQKNR"],
            "!": ["NNRBBQKR", "NNRQBBKR", "QNRBBNKR", "QNRNBBKR", "NQRBBNKR", "NQRNBBKR", "BNRBQNKR", "BNRQNBKR", "NBRQBNKR", "BNRBNQKR", "BNRNQBKR", "NBRNBQKR", "BBRNNQKR", "BBRNQNKR", "BQRBNNKR", "BQRNNBKR", "QBRNBNKR", "BBRQNNKR"],
            ":": ["QNNRKRBB", "NQNRKRBB", "NNQRKRBB", "NNBRKRQB", "NBNRKRBQ", "BNNRKRQB", "BQNRKRNB", "QNBRKRNB", "QBNRKRBN", "BNQRKRNB", "NQBRKRNB", "NBQRKRBN", "BBNRKRQN", "NBBRKRQN", "BBNRKRNQ", "NBBRKRNQ", "QBBRKRNN", "BBQRKRNN"],
            ";": ["BNNRKQRB", "NNBRKQRB", "BNNRKBRQ", "NNBRKBRQ", "QNBRKNRB", "BQNRKNRB", "BNQRKNRB", "NQBRKNRB", "BBNRKNRQ", "NBBRKNRQ", "BQNRKBRN", "QNBRKBRN", "BNQRKBRN", "NQBRKBRN", "BBNRKQRN", "NBBRKQRN", "QBBRKNRN"],
            " ": ["QNNRBKRB", "NQNRBKRB", "NNQRBKRB", "BNNRQKRB", "NNBRQKRB", "NBNRBKRQ", "BQNRNKRB", "QNBRNKRB", "BNQRNKRB", "NQBRNKRB", "BBNRNKRQ", "NBBRNKRQ", "NBQRBKRN", "QBNRBKRN", "BBNRQKRN", "BBQRNKRN", "QBBRNKRN"],
            "=": ["QNNRKBBR", "NQNRKBBR", "NNQRKBBR", "BNNRKBQR", "NNBRKBQR", "NBNRKQBR", "QNBRKBNR", "QBNRKNBR", "BNQRKBNR", "NQBRKBNR", "BQNRKBNR", "NBQRKNBR", "BBNRKNQR", "BBNRKQNR", "NBBRKQNR", "NBBRKNQR", "BBQRKNNR", "QBBRKNNR"],
            "@": ["BBQRNKNR", "NBNRQKBR", "NBNRBKQR", "QBNRNKBR", "NBQRNKBR", "BBNRNKQR", "NBBRNKQR", "QBNRBKNR", "NBQRBKNR", "BBNRQKNR", "NBBRQKNR", "QBBRNKNR"],
            "\"": ["QNNRBBKR", "NQNRBBKR", "NNQRBBKR", "BNNRQBKR", "NNBRQBKR", "NBNRBQKR", "BQNRNBKR", "QNBRNBKR", "QBNRBNKR", "BNQRNBKR", "NQBRNBKR", "NBQRBNKR", "BBNRQNKR", "NBBRQNKR", "BBNRNQKR", "NBBRNQKR", "QBBRNNKR", "BBQRNNKR"],
            "/": ["BQNNRKRB", "QNBNRKRB", "BNQNRKRB", "NQBNRKRB", "BNNQRKRB", "NNBQRKRB", "NBBNRKRQ", "NNBBRKRQ", "BBNNRKRQ", "BNNBRKRQ", "BBQNRKRN", "BQNBRKRN", "NBBQRKRN", "NQBBRKRN", "QBBNRKRN", "QNBBRKRN", "BBNQRKRN", "BNQBRKRN"],
            "-": ["QBNNRKBR", "QNNBRKBR", "NBQNRKBR", "NQNBRKBR", "NBNQRKBR", "NNQBRKBR", "BBNNRKQR", "BNNBRKQR", "NBBNRKQR", "NNBBRKQR", "QBBNRKNR", "QNBBRKNR", "BBNQRKNR", "BNQBRKNR", "NBBQRKNR", "NQBBRKNR", "BBQNRKNR", "BQNBRKNR"],
            "+": ["BQNNRBKR", "QNBNRBKR", "BNQNRBKR", "NQBNRBKR", "BNNQRBKR", "NNBQRBKR", "BNNBRQKR", "NBBNRQKR", "BBNNRQKR", "NNBBRQKR", "BBQNRNKR", "BQNBRNKR", "QBBNRNKR", "QNBBRNKR", "BBNQRNKR", "BNQBRNKR", "NBBQRNKR", "NQBBRNKR"],
            "*": ["BBQNNRKR", "BQNBNRKR", "QBBNNRKR", "QNBBNRKR", "QBNNBRKR", "QNNBBRKR", "BBNQNRKR", "BNQBNRKR", "NBBQNRKR", "NQBBNRKR", "NBQNBRKR", "NQNBBRKR", "BBNNQRKR", "BNNBQRKR", "NBBNQRKR", "NNBBQRKR", "NBNQBRKR", "NNQBBRKR"]
        }

        desifre_alfabe = {}
        for harf, kodlar in alfabe.items():
            for kod in kodlar:
                desifre_alfabe[kod] = harf

        taslar_ters = {
            "1": "B",
            "2": "K",
            "3": "N",
            "4": "Q",
            "5": "R"
            
        }

        cozulmus_metin1 = ""
        cozulmus_metin2 = ""
        kod_uzunlugu = len(list(desifre_alfabe.keys())[0])
        for karakter in sifreli_metin:
            if karakter in taslar_ters:
                cozulmus_metin1 += taslar_ters.get(karakter)
            else:
                cozulmus_metin1 += karakter
        
        i = 0
        while i < len(cozulmus_metin1):
            parca = cozulmus_metin1[i:i + kod_uzunlugu]
            
            if parca in desifre_alfabe:
                cozulmus_metin2 += desifre_alfabe[parca]
                i += kod_uzunlugu
            else:
                cozulmus_metin2 += cozulmus_metin1[i] 
                i += 1 

        return cozulmus_metin2

